#uses "CMSfwInstallUtils/CMSfwInstallUtils.ctl"
#uses "fwInstallationUtils.ctl"
#uses "CMSfwDetectorProtection/CMSfwDetectorProtection.ctl"


main(){
  
 dyn_string exc;

 fwInstallationUtils_loadConfigurations("CMS_GEM_MC_DetectorProtection",exc);
 fwInstallationUtils_appendManagers("CMS_GEM_MC_DetectorProtection", exc);


 configureProtection();

 DebugTN("Detector Protection for multichannel configured",exc);

 fwInstallationUtils_endPostInstall("CMS_GEM_MC_DetectorProtection");
  
}



void configureProtection() {
  dyn_mixed obj; string name;
  dyn_string exc;

 CMSfwDetectorProtection_createInput("","cms_gem_dcs_1:myCondition.boolCondition","p1",exc,"");
 CMSfwDetectorProtection_createInput("","cms_gem_dcs_1:Drift_are_leq_STANDBY.boolCondition","p1",exc,"");
 CMSfwDetectorProtection_createInput("","cms_gem_dcs_1:G1top_are_leq_STANDBY.boolCondition","p1",exc,"");
 CMSfwDetectorProtection_createInput("","cms_gem_dcs_1:G1bot_are_leq_STANDBY.boolCondition","p1",exc,"");
 CMSfwDetectorProtection_createInput("","cms_gem_dcs_1:G2top_are_leq_STANDBY.boolCondition","p1",exc,"");
 CMSfwDetectorProtection_createInput("","cms_gem_dcs_1:G2bot_are_leq_STANDBY.boolCondition","p1",exc,"");
 CMSfwDetectorProtection_createInput("","cms_gem_dcs_1:G3top_are_leq_STANDBY.boolCondition","p1",exc,"");
 CMSfwDetectorProtection_createInput("","cms_gem_dcs_1:G3bot_are_leq_STANDBY.boolCondition","p1",exc,"");

	CMSfwDetectorProtection_initObject(obj);              //necessary
	CMSfwDetectorProtection_setDebugLevel(obj,4);         //necessary
	CMSfwDetectorProtection_setVerifyFrequency(obj, 30);  //change with values >=30 if you want
 
  
 //=================================================================== G1 TOP =======================================================================================	
 name="MC_gotostandby_G1top";
	CMSfwDetectorProtection_addCondition(obj,name,exc);
	CMSfwDetectorProtection_setConditionType( obj,name,"LHC_condition_unsafe_gotostandby_g1top",exc);  //assigning the Condition Type "LHC..." to the condition "name". This may be useful to group different conditions of the same type during the analysis
	CMSfwDetectorProtection_setInput(obj,name,"cms_cen_dcs_2:CMSfwDetectorProtection/Input/LHC_Requires_Standby_CMS_GEM_GEM_PHY",exc);	 //dp passed as condition must be of type DPT CMSfwDetectorProtectionInput
 CMSfwDetectorProtection_setOutputModeUserFunction(obj,name,"dyn_string main(string conditionName, string conditionDp, string systemName, bool getVerifyDpes = false) { \n  dyn_string totDps; \n  dyn_string dps; \n  if(getVerifyDpes) \n    { \n    dps = dpNames(systemName + \"*/channel0{00,07}\",\"FwCaenChannelA1515\"); \n    dynAppend(totDps, dps);  \n    for(int i= 1; i <= dynlen(totDps); i++) \n      { \n       totDps[i] = totDps[i]+\".actual.vMon\"; \n      } \n    } \n  else \n   { \n   dps = dpNames(systemName+\"*/channel0{05,12}\",\"FwCaenChannelA1515\"); \n   dynAppend(totDps, dps); \n   for(int i= 1; i <= dynlen(totDps); i++) totDps[i] = totDps[i]+\".settings.v0\"; \n   }  \n  return totDps; \n }","0",DPEL_FLOAT, FALSE,exc);  
	CMSfwDetectorProtection_setPrePostUserFunction(obj,name," \n \n void CMSfwDetectorProtectionUser_pre_fired(){\n \n  dyn_string i0Dps; \n  dyn_string dps = dpNames(\"*/channel???\",\"FwCaenChannelA1515\");  \n \n   dyn_string i0_readbacks_string; \n    dyn_float i0_readbacks_float; \n  for (int i=1; i<=dynlen(dps); i++) \n  { \n    i0_readbacks_string[i] = dps[i]+\".readBackSettings.i0\"; \n    i0_readbacks_float[i]=0; \n  }  \n  \n  for(int i= 1; i <= dynlen(dps); i++) { \n     dps[i] = dps[i]+\".settings.i0\"; \n    dynAppend(i0Dps, dps[i]);\n     }  \n CMSfwDetectorProtection_dpSetAll(i0Dps, 50); \n  int timeOut = 20; \n  bool readbackOK = FALSE; \n  int tStart = period(getCurrentTime()); \n  int tNow; \n  int tElapsed=0; \n  while(!readbackOK && tElapsed<timeOut) \n    { \n    bool inputCond; \n   dpGet(\"cms_cen_dcs_2:CMSfwDetectorProtection/Input/LHC_Requires_Standby_CMS_GEM_GEM_PHY.status\",inputCond); \n    if(!inputCond) return; \n \n    readbackOK = TRUE; \n    float newRead;  \n    for (int i=1; i<=dynlen(i0_readbacks_string); i++) \n      { \n      dpGet(i0_readbacks_string[i],newRead); \n      i0_readbacks_float[i]=newRead; \n      if (i0_readbacks_float[i]!=50) readbackOK = FALSE; \n      } \n    tNow = period(getCurrentTime()); \n    tElapsed = tNow-tStart; \n    } \n  \n  if(!readbackOK) {DebugTN(\"Timed Out: new i0=50 not applied within 20 seconds. Please check current limits i0!\", \"Current i0 are: \",i0_readbacks_float);} \n \n } \n  \n   dyn_string CMSfwDetectorProtectionUser_convertToReadback(string dpe) {\n  return makeDynString(dpSubStr(dpe, DPSUB_SYS_DP)+  \".actual.vMon\");\n }\n \n \n void CMSfwDetectorProtectionUser_post_fired() { \n \n  dyn_string i0Dps; \n  dyn_string dps = dpNames(\"*/channel0{05,12}\",\"FwCaenChannelA1515\");  \n dyn_string status_strings; dyn_int status_values; \n dyn_bool oks; \n bool ok = TRUE; \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  dynAppend(status_strings, dps[i]+\".actual.status\");  \n  dynAppend(status_values, 3);  \n  dynAppend(oks, FALSE);  \n  } \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  int readInt = 3; \n  dpGet(status_strings[i], readInt); \n  status_values[i] = readInt; \n  \n  if ( getBit(status_values[i],1) || getBit(status_values[i],2) )  oks[i]=FALSE; \n  else  oks[i]=TRUE; \n  \n  ok = ok & oks[i]; \n  } \n  \n  \n  int timeOut = 6*60; \n  int tStart = period(getCurrentTime()); \n  int tNow; \n  int tElapsed=0; \n  while(!ok && tElapsed<timeOut) \n    { \n    bool inputCond; \n   dpGet(\"cms_cen_dcs_2:CMSfwDetectorProtection/Input/LHC_Requires_Standby_CMS_GEM_GEM_PHY.status\",inputCond); \n    if(!inputCond) return; \n  \n      int readInt; \n      ok = TRUE; \n      for (int i=1; i<=dynlen(dps); i++) \n      { \n      dpGet(status_strings[i], readInt); \n      status_values[i] = readInt; \n \n      if ( getBit(status_values[i],1) || getBit(status_values[i],2) ) \n      oks[i]=FALSE; \n      else oks[i]=TRUE; \n      ok = ok & oks[i]; \n      } \n \n    tNow = period(getCurrentTime()); \n    tElapsed = tNow-tStart; \n   } \n  \n  if(!ok) \n    DebugTN(\"Some channels are still ramping after 3 minutes. Please check!\", dps); \n \n  dyn_string vMon_strings; \n  float readvMon; \n  dyn_float vMon_values; \n  bool newOk2 = FALSE; \n  dyn_bool oks2; \n  bool okHvValue = TRUE; \n  \n  float limit = 0; \n \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dynAppend(vMon_strings, dps[i]+\".actual.vMon\"); \n    dpGet( vMon_strings[i] , readvMon ); \n    dynAppend(vMon_values, readvMon); \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    dynAppend(oks2, newOk2); \n    okHvValue = okHvValue & oks2[i]; \n    } \n  \n  okHvValue = FALSE; \n  timeOut = 5*60; \n  tStart = period(getCurrentTime()); \n  tElapsed=0; \n  while(!okHvValue && tElapsed<timeOut) \n  { \n   okHvValue = TRUE; \n   \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dpGet( vMon_strings[i] , readvMon ); \n    vMon_values[i]=readvMon; \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    oks2[i] = newOk2; \n    okHvValue = okHvValue & oks2[i]; \n    } \n  tNow = period(getCurrentTime()); \n  tElapsed = tNow-tStart;  \n  } \n  \n  ok = ok & okHvValue; \n  if(ok) \n    { \n    bool inputCond; \n   dpGet(\"cms_cen_dcs_2:CMSfwDetectorProtection/Input/LHC_Requires_Standby_CMS_GEM_GEM_PHY.status\",inputCond); \n    if(!inputCond) return; \n \n    DebugTN(\"OK: All channels finished ramping to standby. Moving to switch on next channels.\"); \n    CMSfwDetectorProtection_dpSetAll(\"cms_gem_dcs_1:G1top_are_leq_STANDBY.boolCondition\" , TRUE);    \n    } \n  if(!okHvValue) \n    { \n    DebugTN(\"Following channels did not reach a safe voltage:\", dps); \n    } \n \n  DebugTN(\"Elapsed time (seconds) between end of ramping and the condition actual.vMon<=vStandby is \", tElapsed, \"for channels \", dps); \n } \n \n void CMSfwDetectorProtectionUser_pre_gone() {\n \n dyn_string firedDps = dpNames(\"*_are_leq_STANDBY\",\"CMS_GEM_MC_ProtectionConditions\"); \n for (int i=1; i<=dynlen(firedDps); i++) firedDps[i]=firedDps[i]+\".boolCondition\";  \n CMSfwDetectorProtection_dpSetAll( firedDps , FALSE); \n \n } \n \n void CMSfwDetectorProtectionUser_post_gone() { \n \n \n  dyn_string i0Dps; \n  dyn_string dps = dpNames(\"*/channel???\",\"FwCaenChannelA1515\");  \n dyn_string status_strings; dyn_int status_values; \n dyn_bool oks; \n bool ok = TRUE; \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  dynAppend(status_strings, dps[i]+\".actual.status\");  \n  dynAppend(status_values, 3);  \n  dynAppend(oks, FALSE);  \n  } \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  int readInt = 3; \n  dpGet(status_strings[i], readInt); \n  status_values[i] = readInt; \n  \n  if ( getBit(status_values[i],1) || getBit(status_values[i],2) )  oks[i]=FALSE; \n  else  oks[i]=TRUE; \n  \n  ok = ok & oks[i]; \n  } \n  \n  \n  int timeOut = 1*60; \n  int tStart = period(getCurrentTime()); \n  int tNow; \n  int tElapsed=0; \n  while(!ok && tElapsed<timeOut) \n    { \n    bool inputCond; \n   dpGet(\"cms_cen_dcs_2:CMSfwDetectorProtection/Input/LHC_Requires_Standby_CMS_GEM_GEM_PHY.status\",inputCond); \n    if(!inputCond) return; \n \n      int readInt; \n      ok = TRUE; \n      for (int i=1; i<=dynlen(dps); i++) \n      { \n      dpGet(status_strings[i], readInt); \n      status_values[i] = readInt; \n \n      if ( getBit(status_values[i],1) || getBit(status_values[i],2) ) \n      oks[i]=FALSE; \n      else oks[i]=TRUE; \n      ok = ok & oks[i]; \n      } \n \n    tNow = period(getCurrentTime()); \n    tElapsed = tNow-tStart; \n   } \n  \n  if(!ok) \n    DebugTN(\"Some channels are still ramping after 1 minutes. Please check!\"); \n  \n \n  dyn_string MCboards = dpNames(\"*/board??\",\"FwCaenBoardSY1527A1515\");\n \n \n  for (int j=1; j<=dynlen(MCboards); j++)\n  {  \n    dyn_string sevenHvChannels  = dpNames(MCboards[j]+\"/channel0{00,01,02,03,04,05,06}.settings.i0\",\"FwCaenChannelA1515\"); \n    dyn_string topHvChannels = dpNames(MCboards[j]+\"/channel0{01,03,05}.actual.vMon\",\"FwCaenChannelA1515\"); \n \n    bool SetHighI0 = FALSE; \n    float readVmon; \n    for (int i=1; i<=dynlen(topHvChannels); i++) \n    { \n      dpGet(topHvChannels[i], readVmon); \n      if (readVmon > 10) SetHighI0 = TRUE; \n    } \n  \n    if(SetHighI0)  \n    { dyn_bool runMode; \n    bool cosmics, physics, standby; \n    dyn_string dpStatus = makeDynString(\"cms_gem_dcs_1:GL1.GEMCAEN.Beam.Physics\",\"cms_gem_dcs_1:GL1.GEMCAEN.Beam.Cosmic\",\"cms_gem_dcs_1:GL1.GEMCAEN.Beam.StandBy\"); \n    \n    dpGet(dpStatus, runMode); \n    physics = runMode[1]; \n    cosmics = runMode[2]; \n    standby = runMode[3]; \n    \n    float i0Low; string newI0Value; \n	if (physics) {i0Low = 10; newI0Value=\"10\";}  \n    if (cosmics) {i0Low = 2; newI0Value=\"2\";}  \n \n      DebugTN(\"Applying i0=\"+newI0Value+\" to following channels: \", sevenHvChannels); \n      CMSfwDetectorProtection_dpSetAll(sevenHvChannels, i0Low); \n    } \n    else \n    { \n      string newI0Value=\"2\"; \n      DebugTN(\"Applying i0=\"+newI0Value+\" to following channels: \", sevenHvChannels); \n      CMSfwDetectorProtection_dpSetAll(sevenHvChannels, 2); \n    } \n    \n    \n    sevenHvChannels  = dpNames(MCboards[j]+\"/channel0{07,08,09,10,11,12,13}.settings.i0\",\"FwCaenChannelA1515\"); \n    topHvChannels = dpNames(MCboards[j]+\"/channel0{08,10,12}.actual.vMon\",\"FwCaenChannelA1515\"); \n \n    SetHighI0 = FALSE; \n    for (int i=1; i<=dynlen(topHvChannels); i++) \n    { \n      dpGet(topHvChannels[i], readVmon); \n      if (readVmon > 10) SetHighI0 = TRUE;\n     } \n  \n    if(SetHighI0)  \n    { dyn_bool runMode; \n    bool cosmics, physics, standby; \n    dyn_string dpStatus = makeDynString(\"cms_gem_dcs_1:GL1.GEMCAEN.Beam.Physics\",\"cms_gem_dcs_1:GL1.GEMCAEN.Beam.Cosmic\",\"cms_gem_dcs_1:GL1.GEMCAEN.Beam.StandBy\"); \n    \n    dpGet(dpStatus, runMode); \n    physics = runMode[1]; \n    cosmics = runMode[2]; \n    standby = runMode[3]; \n    \n    float i0Low; string newI0Value; \n	if (physics) {i0Low = 10; newI0Value=\"10\";}  \n    if (cosmics) {i0Low = 2; newI0Value=\"2\";}        \n      DebugTN(\"Applying i0=\"+newI0Value+\" to following channels: \", sevenHvChannels); \n      CMSfwDetectorProtection_dpSetAll(sevenHvChannels, i0Low); \n    } \n    else \n    { \n      string newI0Value=\"2\"; \n      DebugTN(\"Applying i0=\"+newI0Value+\" to following channels: \", sevenHvChannels); \n      CMSfwDetectorProtection_dpSetAll(sevenHvChannels, 2); \n    } \n  } \n \n }\n",exc);
	CMSfwDetectorProtection_setVerifyModeUserFunction(obj,name,"bool main(anytype value) { \n  bool verify = TRUE; \n float val_float = (float) value; \n if ( val_float>310+5 ) verify=FALSE; \n return verify;\n}",1,exc);

 
 //=================================================================== G2 TOP =======================================================================================	
 name="MC_gotostandby_G2top";
	CMSfwDetectorProtection_addCondition(obj,name,exc);
	CMSfwDetectorProtection_setConditionType( obj,name,"LHC_condition_unsafe_gotostandby_g2top",exc); 
 CMSfwDetectorProtection_setInput(obj,name,"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G1top_are_leq_STANDBY_boolCondition",exc);	
 CMSfwDetectorProtection_setOutputModeUserFunction(obj,name,"dyn_string main(string conditionName, string conditionDp, string systemName, bool getVerifyDpes = false) {\n  dyn_string totDps;\n  dyn_string dps = dpNames(systemName + \"*/channel0{03,10}\",\"FwCaenChannelA1515\");\n  dynAppend(totDps, dps);  \n   for(int i= 1; i <= dynlen(totDps); i++) {\n    if(getVerifyDpes)\n      totDps[i] = totDps[i]+\".actual.vMon\";\n    else\n      totDps[i] = totDps[i]+\".settings.v0\";\n  }\n  return totDps;\n}","0",DPEL_FLOAT, FALSE,exc);
	CMSfwDetectorProtection_setPrePostUserFunction(obj,name," \n  \n   dyn_string CMSfwDetectorProtectionUser_convertToReadback(string dpe) {\n \n DebugTN(\"G2TOP SCRIPTS\"); \n \n  return makeDynString(dpSubStr(dpe, DPSUB_SYS_DP)+  \".actual.vMon\");\n }\n \n \n void CMSfwDetectorProtectionUser_post_fired() { \n \n  dyn_string i0Dps; \n  dyn_string dps = dpNames(\"*/channel0{03,10}\",\"FwCaenChannelA1515\");  \n dyn_string status_strings; dyn_int status_values; \n dyn_bool oks; \n bool ok = TRUE; \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  dynAppend(status_strings, dps[i]+\".actual.status\");  \n  dynAppend(status_values, 3);  \n  dynAppend(oks, FALSE);  \n  } \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  int readInt = 3; \n  dpGet(status_strings[i], readInt); \n  status_values[i] = readInt; \n  \n  if ( getBit(status_values[i],1) || getBit(status_values[i],2) )  oks[i]=FALSE; \n  else  oks[i]=TRUE; \n  \n  ok = ok & oks[i]; \n  } \n  \n  \n  int timeOut = 3*60; \n  int tStart = period(getCurrentTime()); \n  int tNow; \n  int tElapsed=0; \n  while(!ok && tElapsed<timeOut) \n    { \n    bool inputCond; \n   dpGet(\"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G1top_are_leq_STANDBY_boolCondition.status\",inputCond); \n    if(!inputCond) return; \n  \n      int readInt; \n      ok = TRUE; \n      for (int i=1; i<=dynlen(dps); i++) \n      { \n      dpGet(status_strings[i], readInt); \n      status_values[i] = readInt; \n \n      if ( getBit(status_values[i],1) || getBit(status_values[i],2) ) \n      oks[i]=FALSE; \n      else oks[i]=TRUE; \n      ok = ok & oks[i]; \n      } \n \n    tNow = period(getCurrentTime()); \n    tElapsed = tNow-tStart; \n   } \n  \n  if(!ok) \n    DebugTN(\"Some G2top channels are still ramping after 3 minutes. Please check!\", dps); \n \n  dyn_string vMon_strings; \n  float readvMon; \n  dyn_float vMon_values; \n  bool newOk2 = FALSE; \n  dyn_bool oks2; \n  bool okHvValue = TRUE; \n  \n  float limit = 0; \n \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dynAppend(vMon_strings, dps[i]+\".actual.vMon\"); \n    dpGet( vMon_strings[i] , readvMon ); \n    dynAppend(vMon_values, readvMon); \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    dynAppend(oks2, newOk2); \n    okHvValue = okHvValue & oks2[i]; \n    } \n  \n  okHvValue = FALSE; \n  timeOut = 5*60; \n  tStart = period(getCurrentTime()); \n  tElapsed=0; \n  while(!okHvValue && tElapsed<timeOut) \n  { \n   okHvValue = TRUE; \n   \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dpGet( vMon_strings[i] , readvMon ); \n    vMon_values[i]=readvMon; \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    oks2[i] = newOk2; \n    okHvValue = okHvValue & oks2[i]; \n    } \n  tNow = period(getCurrentTime()); \n  tElapsed = tNow-tStart;  \n  } \n  \n  ok = ok & okHvValue; \n  if(ok) \n    { \n    bool inputCond; \n   dpGet(\"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G1top_are_leq_STANDBY_boolCondition.status\",inputCond); \n    if(!inputCond) return; \n \n    DebugTN(\"OK: All channels finished ramping to standby. Moving to switch on next channels.\"); \n    CMSfwDetectorProtection_dpSetAll(\"cms_gem_dcs_1:G2top_are_leq_STANDBY.boolCondition\" , TRUE);    \n    } \n  if(!okHvValue) \n    { \n    DebugTN(\"Following channels did not reach a safe voltage:\", dps); \n    } \n \n  DebugTN(\"Elapsed time (seconds) between end of ramping and the condition actual.vMon<=vStandby is \", tElapsed, \"for channels \", dps); \n } \n \n",exc);
	CMSfwDetectorProtection_setVerifyModeUserFunction(obj,name,"bool main(anytype value) { \n  bool verify = TRUE; \n float val_float = (float) value; \n if ( val_float>0+5 ) verify=FALSE; \n return verify;\n}",1,exc);
  
 
  //=================================================================== G3 TOP =======================================================================================	
 name="MC_gotostandby_G3top";
	CMSfwDetectorProtection_addCondition(obj,name,exc);
	CMSfwDetectorProtection_setConditionType( obj,name,"LHC_condition_unsafe_gotostandby_g3top",exc);
 CMSfwDetectorProtection_setInput(obj,name,"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G2top_are_leq_STANDBY_boolCondition",exc);	 //dp passed as condition must be of type DPT CMSfwDetectorProtectionInput
 CMSfwDetectorProtection_setOutputModeUserFunction(obj,name,"dyn_string main(string conditionName, string conditionDp, string systemName, bool getVerifyDpes = false) {\n  dyn_string totDps;\n  dyn_string dps = dpNames(systemName + \"*/channel0{01,08}\",\"FwCaenChannelA1515\");\n  dynAppend(totDps, dps);  \n   for(int i= 1; i <= dynlen(totDps); i++) {\n    if(getVerifyDpes)\n      totDps[i] = totDps[i]+\".actual.vMon\";\n    else\n      totDps[i] = totDps[i]+\".settings.v0\";\n  }\n  return totDps;\n}","0",DPEL_FLOAT, FALSE,exc);
	CMSfwDetectorProtection_setPrePostUserFunction(obj,name," \n \n dyn_string CMSfwDetectorProtectionUser_convertToReadback(string dpe) { \n DebugTN(\"G3TOP SCRIPTS\"); \n \n  return makeDynString(dpSubStr(dpe, DPSUB_SYS_DP)+  \".actual.vMon\");\n }\n \n \n void CMSfwDetectorProtectionUser_post_fired() { \n \n  dyn_string i0Dps; \n  dyn_string dps = dpNames(\"*/channel0{01,08}\",\"FwCaenChannelA1515\");  \n dyn_string status_strings; dyn_int status_values; \n dyn_bool oks; \n bool ok = TRUE; \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  dynAppend(status_strings, dps[i]+\".actual.status\");  \n  dynAppend(status_values, 3);  \n  dynAppend(oks, FALSE);  \n  } \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  int readInt = 3; \n  dpGet(status_strings[i], readInt); \n  status_values[i] = readInt; \n  \n  if ( getBit(status_values[i],1) || getBit(status_values[i],2) )  oks[i]=FALSE; \n  else  oks[i]=TRUE; \n  \n  ok = ok & oks[i]; \n  } \n  \n  \n  int timeOut = 3*60; \n  int tStart = period(getCurrentTime()); \n  int tNow; \n  int tElapsed=0; \n  while(!ok && tElapsed<timeOut) \n    { \n    bool inputCond; \n   dpGet(\"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G2top_are_leq_STANDBY_boolCondition.status\",inputCond); \n    if(!inputCond) return; \n   \n      int readInt; \n      ok = TRUE; \n      for (int i=1; i<=dynlen(dps); i++) \n      { \n      dpGet(status_strings[i], readInt); \n      status_values[i] = readInt; \n \n      if ( getBit(status_values[i],1) || getBit(status_values[i],2) ) \n      oks[i]=FALSE; \n      else oks[i]=TRUE; \n      ok = ok & oks[i]; \n      } \n \n    tNow = period(getCurrentTime()); \n    tElapsed = tNow-tStart; \n   } \n  \n  if(!ok) \n    DebugTN(\"Some channels are still ramping after 3 minutes. Please check!\", dps); \n \n  dyn_string vMon_strings; \n  float readvMon; \n  dyn_float vMon_values; \n  bool newOk2 = FALSE; \n  dyn_bool oks2; \n  bool okHvValue = TRUE; \n  \n  float limit = 0; \n \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dynAppend(vMon_strings, dps[i]+\".actual.vMon\"); \n    dpGet( vMon_strings[i] , readvMon ); \n    dynAppend(vMon_values, readvMon); \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    dynAppend(oks2, newOk2); \n    okHvValue = okHvValue & oks2[i]; \n    } \n  \n  okHvValue = FALSE; \n  timeOut = 5*60; \n  tStart = period(getCurrentTime()); \n  tElapsed=0; \n  while(!okHvValue && tElapsed<timeOut) \n  { \n   okHvValue = TRUE; \n   \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dpGet( vMon_strings[i] , readvMon ); \n    vMon_values[i]=readvMon; \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    oks2[i] = newOk2; \n    okHvValue = okHvValue & oks2[i]; \n    } \n  tNow = period(getCurrentTime()); \n  tElapsed = tNow-tStart;  \n  } \n  \n  ok = ok & okHvValue; \n  if(ok) \n    { \n    bool inputCond; \n   dpGet(\"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G2top_are_leq_STANDBY_boolCondition.status\",inputCond); \n    if(!inputCond) return; \n \n    DebugTN(\"OK: All channels finished ramping to standby. Moving to switch on next channels.\"); \n    CMSfwDetectorProtection_dpSetAll(\"cms_gem_dcs_1:G3top_are_leq_STANDBY.boolCondition\" , TRUE);    \n    } \n  if(!okHvValue) \n    { \n    DebugTN(\"Following channels did not reach a safe voltage:\", dps); \n    } \n \n  DebugTN(\"Elapsed time (seconds) between end of ramping and the condition actual.vMon<=vStandby is \", tElapsed, \"for channels \", dps); \n } \n/* void CMSfwDetectorProtectionUser_pre_gone() { } */\n/* void CMSfwDetectorProtectionUser_post_gone() { } */\n",exc);
	CMSfwDetectorProtection_setVerifyModeUserFunction(obj,name,"bool main(anytype value) { \n  bool verify = TRUE; \n float val_float = (float) value; \n if ( val_float>0+5 ) verify=FALSE; \n return verify;\n}",1,exc);
 
  
 //=================================================================== DRIFT =======================================================================================	
 name="MC_gotostandby_drift";
	CMSfwDetectorProtection_addCondition(obj,name,exc);
	CMSfwDetectorProtection_setConditionType( obj,name,"LHC_condition_unsafe_gotostandby_drift",exc);
 CMSfwDetectorProtection_setInput(obj,name,"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G3top_are_leq_STANDBY_boolCondition",exc);
 CMSfwDetectorProtection_setOutputModeUserFunction(obj,name,"dyn_string main(string conditionName, string conditionDp, string systemName, bool getVerifyDpes = false) {\n  dyn_string totDps;\n  dyn_string dps = dpNames(systemName + \"*/channel0{06,13}\",\"FwCaenChannelA1515\");\n  dynAppend(totDps, dps);  \n   for(int i= 1; i<= dynlen(totDps); i++) {\n    if(getVerifyDpes)\n      totDps[i] = totDps[i]+\".actual.vMon\";\n    else\n      totDps[i] = totDps[i]+\".settings.v0\";\n  }\n  return totDps;\n}","740",DPEL_FLOAT, FALSE,exc);
 CMSfwDetectorProtection_setPrePostUserFunction(obj,name," \n  \n   dyn_string CMSfwDetectorProtectionUser_convertToReadback(string dpe) {\n \n DebugTN(\"DRIFT SCRIPTS\"); \n return makeDynString(dpSubStr(dpe, DPSUB_SYS_DP)+  \".actual.vMon\");\n }\n \n \n void CMSfwDetectorProtectionUser_post_fired() { \n \n  dyn_string i0Dps; \n  dyn_string dps = dpNames(\"*/channel0{06,13}\",\"FwCaenChannelA1515\");  \n dyn_string status_strings; dyn_int status_values; \n dyn_bool oks; \n bool ok = TRUE; \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  dynAppend(status_strings, dps[i]+\".actual.status\");  \n  dynAppend(status_values, 3);  \n  dynAppend(oks, FALSE);  \n  } \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  int readInt = 3; \n  dpGet(status_strings[i], readInt); \n  status_values[i] = readInt; \n  \n  if ( getBit(status_values[i],1) || getBit(status_values[i],2) )  oks[i]=FALSE; \n  else  oks[i]=TRUE; \n  \n  ok = ok & oks[i]; \n  } \n  \n  \n  int timeOut = 3*60; \n  int tStart = period(getCurrentTime()); \n  int tNow; \n  int tElapsed=0; \n  while(!ok && tElapsed<timeOut) \n    { \n    bool inputCond; \n   dpGet(\"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G3top_are_leq_STANDBY_boolCondition.status\",inputCond); \n    if(!inputCond) return; \n   \n      int readInt; \n      ok = TRUE; \n      for (int i=1; i<=dynlen(dps); i++) \n      { \n      dpGet(status_strings[i], readInt); \n      status_values[i] = readInt; \n \n      if ( getBit(status_values[i],1) || getBit(status_values[i],2) ) \n      oks[i]=FALSE; \n      else oks[i]=TRUE; \n      ok = ok & oks[i]; \n      } \n \n    tNow = period(getCurrentTime()); \n    tElapsed = tNow-tStart; \n   } \n  \n  if(!ok) \n    DebugTN(\"Some channels are still ramping after 3 minutes. Please check!\", dps); \n \n  dyn_string vMon_strings; \n  float readvMon; \n  dyn_float vMon_values; \n  bool newOk2 = FALSE; \n  dyn_bool oks2; \n  bool okHvValue = TRUE; \n  \n  float limit = 740; \n \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dynAppend(vMon_strings, dps[i]+\".actual.vMon\"); \n    dpGet( vMon_strings[i] , readvMon ); \n    dynAppend(vMon_values, readvMon); \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    dynAppend(oks2, newOk2); \n    okHvValue = okHvValue & oks2[i]; \n    } \n  \n  okHvValue = FALSE; \n  timeOut = 5*60; \n  tStart = period(getCurrentTime()); \n  tElapsed=0; \n  while(!okHvValue && tElapsed<timeOut) \n  { \n   okHvValue = TRUE; \n   \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dpGet( vMon_strings[i] , readvMon ); \n    vMon_values[i]=readvMon; \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    oks2[i] = newOk2; \n    okHvValue = okHvValue & oks2[i]; \n    } \n  tNow = period(getCurrentTime()); \n  tElapsed = tNow-tStart;  \n  } \n  \n  ok = ok & okHvValue; \n  if(ok) \n    { \n    bool inputCond; \n   dpGet(\"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G3top_are_leq_STANDBY_boolCondition.status\",inputCond); \n    if(!inputCond) return; \n \n    DebugTN(\"OK: All channels finished ramping to standby. Moving to switch on next channels.\"); \n    CMSfwDetectorProtection_dpSetAll(\"cms_gem_dcs_1:Drift_are_leq_STANDBY.boolCondition\" , TRUE);    \n    } \n  if(!okHvValue) \n    { \n    DebugTN(\"Following channels did not reach a safe voltage:\", dps); \n    } \n \n  DebugTN(\"Elapsed time (seconds) between end of ramping and the condition actual.vMon<=vStandby is \", tElapsed, \"for channels \", dps); \n } \n/* void CMSfwDetectorProtectionUser_pre_gone() { } */\n/* void CMSfwDetectorProtectionUser_post_gone() { } */\n",exc);
	CMSfwDetectorProtection_setVerifyModeUserFunction(obj,name,"bool main(anytype value) { \n  bool verify = TRUE; \n float val_float = (float) value; \n if ( val_float>740+5 ) verify=FALSE; \n return verify;\n}",5,exc);
		
 
 //=================================================================== G1 BOT =======================================================================================	
 name="MC_gotostandby_G1bot";
	CMSfwDetectorProtection_addCondition(obj,name,exc);
	CMSfwDetectorProtection_setConditionType( obj,name,"LHC_condition_unsafe_gotostandby_g1bot",exc);
 CMSfwDetectorProtection_setInput(obj,name,"cms_gem_dcs_1:CMSfwDetectorProtection/Input/Drift_are_leq_STANDBY_boolCondition",exc);
 CMSfwDetectorProtection_setOutputModeUserFunction(obj,name,"dyn_string main(string conditionName, string conditionDp, string systemName, bool getVerifyDpes = false) {\n  dyn_string totDps;\n  dyn_string dps = dpNames(systemName + \"*/channel0{04,11}\",\"FwCaenChannelA1515\");\n  dynAppend(totDps, dps);  \n   for(int i= 1; i<= dynlen(totDps); i++) {\n    if(getVerifyDpes)\n      totDps[i] = totDps[i]+\".actual.vMon\";\n    else\n      totDps[i] = totDps[i]+\".settings.v0\";\n  }\n  return totDps;\n}","285",DPEL_FLOAT, FALSE,exc);
 CMSfwDetectorProtection_setPrePostUserFunction(obj,name," \n  \n   dyn_string CMSfwDetectorProtectionUser_convertToReadback(string dpe) {\n \n DebugTN(\"G1BOT SCRIPTS\"); \n \n return makeDynString(dpSubStr(dpe, DPSUB_SYS_DP)+  \".actual.vMon\");\n }\n \n \n void CMSfwDetectorProtectionUser_post_fired() { \n \n  dyn_string i0Dps; \n  dyn_string dps = dpNames(\"*/channel0{04,11}\",\"FwCaenChannelA1515\");  \n dyn_string status_strings; dyn_int status_values; \n dyn_bool oks; \n bool ok = TRUE; \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  dynAppend(status_strings, dps[i]+\".actual.status\");  \n  dynAppend(status_values, 3);  \n  dynAppend(oks, FALSE);  \n  } \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  int readInt = 3; \n  dpGet(status_strings[i], readInt); \n  status_values[i] = readInt; \n  \n  if ( getBit(status_values[i],1) || getBit(status_values[i],2) )  oks[i]=FALSE; \n  else  oks[i]=TRUE; \n  \n  ok = ok & oks[i]; \n  } \n  \n  \n  int timeOut = 3*60; \n  int tStart = period(getCurrentTime()); \n  int tNow; \n  int tElapsed=0; \n  while(!ok && tElapsed<timeOut) \n    { \n    bool inputCond; \n   dpGet(\"cms_gem_dcs_1:CMSfwDetectorProtection/Input/Drift_are_leq_STANDBY_boolCondition.status\",inputCond); \n    if(!inputCond) return; \n   \n      int readInt; \n      ok = TRUE; \n      for (int i=1; i<=dynlen(dps); i++) \n      { \n      dpGet(status_strings[i], readInt); \n      status_values[i] = readInt; \n \n      if ( getBit(status_values[i],1) || getBit(status_values[i],2) ) \n      oks[i]=FALSE; \n      else oks[i]=TRUE; \n      ok = ok & oks[i]; \n      } \n \n    tNow = period(getCurrentTime()); \n    tElapsed = tNow-tStart; \n   } \n  \n  if(!ok) \n    DebugTN(\"Some channels are still ramping after 3 minutes. Please check!\", dps); \n \n  dyn_string vMon_strings; \n  float readvMon; \n  dyn_float vMon_values; \n  bool newOk2 = FALSE; \n  dyn_bool oks2; \n  bool okHvValue = TRUE; \n  \n  float limit = 285; \n \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dynAppend(vMon_strings, dps[i]+\".actual.vMon\"); \n    dpGet( vMon_strings[i] , readvMon ); \n    dynAppend(vMon_values, readvMon); \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    dynAppend(oks2, newOk2); \n    okHvValue = okHvValue & oks2[i]; \n    } \n  \n  okHvValue = FALSE; \n  timeOut = 5*60; \n  tStart = period(getCurrentTime()); \n  tElapsed=0; \n  while(!okHvValue && tElapsed<timeOut) \n  { \n   okHvValue = TRUE; \n   \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dpGet( vMon_strings[i] , readvMon ); \n    vMon_values[i]=readvMon; \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    oks2[i] = newOk2; \n    okHvValue = okHvValue & oks2[i]; \n    } \n  tNow = period(getCurrentTime()); \n  tElapsed = tNow-tStart;  \n  } \n  \n  ok = ok & okHvValue; \n  if(ok) \n    { \n    bool inputCond; \n   dpGet(\"cms_gem_dcs_1:CMSfwDetectorProtection/Input/Drift_are_leq_STANDBY_boolCondition.status\",inputCond); \n    if(!inputCond) return; \n \n    DebugTN(\"OK: All channels finished ramping to standby. Moving to switch on next channels.\"); \n    CMSfwDetectorProtection_dpSetAll(\"cms_gem_dcs_1:G1bot_are_leq_STANDBY.boolCondition\" , TRUE);    \n    } \n  if(!okHvValue) \n    { \n    DebugTN(\"Following channels did not reach a safe voltage:\", dps); \n    } \n \n  DebugTN(\"Elapsed time (seconds) between end of ramping and the condition actual.vMon<=vStandby is \", tElapsed, \"for channels \", dps); \n } \n/* void CMSfwDetectorProtectionUser_pre_gone() { } */\n/* void CMSfwDetectorProtectionUser_post_gone() { } */\n",exc);
	CMSfwDetectorProtection_setVerifyModeUserFunction(obj,name,"bool main(anytype value) { \n  bool verify = TRUE; \n float val_float = (float) value; \n if ( val_float>285+5 ) verify=FALSE; \n return verify;\n}",1,exc);
  
  
 //=================================================================== G2 BOT =======================================================================================	
 name="MC_gotostandby_G2bot";
	CMSfwDetectorProtection_addCondition(obj,name,exc);
	CMSfwDetectorProtection_setConditionType( obj,name,"LHC_condition_unsafe_gotostandby_g2bot",exc);
 CMSfwDetectorProtection_setInput(obj,name,"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G1bot_are_leq_STANDBY_boolCondition",exc);	 //dp passed as condition must be of type DPT CMSfwDetectorProtectionInput
 CMSfwDetectorProtection_setOutputModeUserFunction(obj,name,"dyn_string main(string conditionName, string conditionDp, string systemName, bool getVerifyDpes = false) {\n  dyn_string totDps;\n  dyn_string dps = dpNames(systemName + \"*/channel0{02,09}\",\"FwCaenChannelA1515\");\n  dynAppend(totDps, dps);  \n   for(int i= 1; i <= dynlen(totDps); i++) {\n    if(getVerifyDpes)\n      totDps[i] = totDps[i]+\".actual.vMon\";\n    else\n      totDps[i] = totDps[i]+\".settings.v0\";\n  }\n  return totDps;\n}","575",DPEL_FLOAT, FALSE,exc);
 CMSfwDetectorProtection_setPrePostUserFunction(obj,name," \n  \n   dyn_string CMSfwDetectorProtectionUser_convertToReadback(string dpe) { \n DebugTN(\"G2BOT SCRIPTS\"); \n \n  return makeDynString(dpSubStr(dpe, DPSUB_SYS_DP)+  \".actual.vMon\");\n }\n \n \n void CMSfwDetectorProtectionUser_post_fired() { \n \n  dyn_string i0Dps; \n  dyn_string dps = dpNames(\"*/channel0{02,09}\",\"FwCaenChannelA1515\");  \n dyn_string status_strings; dyn_int status_values; \n dyn_bool oks; \n bool ok = TRUE; \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  dynAppend(status_strings, dps[i]+\".actual.status\");  \n  dynAppend(status_values, 3);  \n  dynAppend(oks, FALSE);  \n  } \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  int readInt = 3; \n  dpGet(status_strings[i], readInt); \n  status_values[i] = readInt; \n  \n  if ( getBit(status_values[i],1) || getBit(status_values[i],2) )  oks[i]=FALSE; \n  else  oks[i]=TRUE; \n  \n  ok = ok & oks[i]; \n  } \n  \n  \n  int timeOut = 3*60; \n  int tStart = period(getCurrentTime()); \n  int tNow; \n  int tElapsed=0; \n  while(!ok && tElapsed<timeOut) \n    {  \n    bool inputCond; \n   dpGet(\"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G1bot_are_leq_STANDBY_boolCondition.status\",inputCond); \n    if(!inputCond) return; \n  \n      int readInt; \n      ok = TRUE; \n      for (int i=1; i<=dynlen(dps); i++) \n      { \n      dpGet(status_strings[i], readInt); \n      status_values[i] = readInt; \n \n      if ( getBit(status_values[i],1) || getBit(status_values[i],2) ) \n      oks[i]=FALSE; \n      else oks[i]=TRUE; \n      ok = ok & oks[i]; \n      } \n \n    tNow = period(getCurrentTime()); \n    tElapsed = tNow-tStart; \n   } \n  \n  if(!ok) \n    DebugTN(\"Some channels are still ramping after 3 minutes. Please check!\", dps); \n \n  dyn_string vMon_strings; \n  float readvMon; \n  dyn_float vMon_values; \n  bool newOk2 = FALSE; \n  dyn_bool oks2; \n  bool okHvValue = TRUE; \n  \n  float limit = 575; \n \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dynAppend(vMon_strings, dps[i]+\".actual.vMon\"); \n    dpGet( vMon_strings[i] , readvMon ); \n    dynAppend(vMon_values, readvMon); \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    dynAppend(oks2, newOk2); \n    okHvValue = okHvValue & oks2[i]; \n    } \n  \n  okHvValue = FALSE; \n  timeOut = 5*60; \n  tStart = period(getCurrentTime()); \n  tElapsed=0; \n  while(!okHvValue && tElapsed<timeOut) \n  { \n   okHvValue = TRUE; \n   \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dpGet( vMon_strings[i] , readvMon ); \n    vMon_values[i]=readvMon; \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    oks2[i] = newOk2; \n    okHvValue = okHvValue & oks2[i]; \n    } \n  tNow = period(getCurrentTime()); \n  tElapsed = tNow-tStart;  \n  } \n  \n  ok = ok & okHvValue; \n  if(ok) \n    { \n    bool inputCond; \n   dpGet(\"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G1bot_are_leq_STANDBY_boolCondition.status\",inputCond); \n    if(!inputCond) return; \n \n    DebugTN(\"OK: All channels finished ramping to standby. Moving to switch on next channels.\"); \n    CMSfwDetectorProtection_dpSetAll(\"cms_gem_dcs_1:G2bot_are_leq_STANDBY.boolCondition\" , TRUE);    \n    } \n  if(!okHvValue) \n    { \n    DebugTN(\"Following channels did not reach a safe voltage:\", dps); \n    } \n \n  DebugTN(\"Elapsed time (seconds) between end of ramping and the condition actual.vMon<=vStandby is \", tElapsed, \"for channels \", dps); \n } \n \n",exc);
	CMSfwDetectorProtection_setVerifyModeUserFunction(obj,name,"bool main(anytype value) { \n  bool verify = TRUE; \n float val_float = (float) value; \n if ( val_float>575+5 ) verify=FALSE; \n return verify;\n}",1,exc);
		
 
 //=================================================================== G3 BOT =======================================================================================	
 name="MC_gotostandby_G3bot";
	CMSfwDetectorProtection_addCondition(obj,name,exc);  //adding a condition with name "name" to the configuration "obj"
	CMSfwDetectorProtection_setConditionType( obj,name,"LHC_condition_unsafe_gotostandby_g3bot",exc);  //assigning the Condition Type "LHC..." to the condition "name". This may be useful to group different conditions of the same type during the analysis
 CMSfwDetectorProtection_setInput(obj,name,"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G2bot_are_leq_STANDBY_boolCondition",exc);	 //dp passed as condition must be of type DPT CMSfwDetectorProtectionInput
 CMSfwDetectorProtection_setOutputModeUserFunction(obj,name,"dyn_string main(string conditionName, string conditionDp, string systemName, bool getVerifyDpes = false) {\n  dyn_string totDps;\n  dyn_string dps = dpNames(systemName + \"*/channel0{00,07}\",\"FwCaenChannelA1515\");\n  dynAppend(totDps, dps);  \n   for(int i= 1; i <= dynlen(totDps); i++) {\n    if(getVerifyDpes)\n      totDps[i] = totDps[i]+\".actual.vMon\";\n    else\n      totDps[i] = totDps[i]+\".settings.v0\";\n  }\n  return totDps;\n}","310",DPEL_FLOAT, FALSE,exc);
	CMSfwDetectorProtection_setPrePostUserFunction(obj,name,"\n  dyn_string CMSfwDetectorProtectionUser_convertToReadback(string dpe) { \n DebugTN(\"G3BOT SCRIPTS\"); \n \n  return makeDynString(dpSubStr(dpe, DPSUB_SYS_DP)+  \".actual.vMon\");\n }\n \n \n  \n \n  void CMSfwDetectorProtectionUser_post_fired() {  \n  dyn_string i0Dps; \n  dyn_string dps = dpNames(\"*/channel???\",\"FwCaenChannelA1515\");  \n dyn_string status_strings; dyn_int status_values; \n dyn_bool oks; \n bool ok = TRUE; \n  for (int i=1; i<=dynlen(dps); i++) \n  { \n  dynAppend(status_strings, dps[i]+\".actual.status\");  \n dynAppend(status_values, 3);  \n  dynAppend(oks, FALSE);  \n  } \n \n for (int i=1; i<=dynlen(dps); i++) \n  { \n  int readInt = 3; \n  dpGet(status_strings[i], readInt); \n  status_values[i] = readInt; \n  \n  if ( getBit(status_values[i],1) || getBit(status_values[i],2) )  oks[i]=FALSE; \n  else  oks[i]=TRUE; \n  \n  ok = ok & oks[i]; \n  } \n  \n  \n  int timeOut = 3*60; \n  int tStart = period(getCurrentTime()); \n  int tNow; \n  int tElapsed=0; \n  while(!ok && tElapsed<timeOut) \n    {  \n    bool inputCond; \n   dpGet(\"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G2bot_are_leq_STANDBY_boolCondition.status\",inputCond); \n    if(!inputCond) return; \n  \n      int readInt; \n      ok = TRUE; \n      for (int i=1; i<=dynlen(dps); i++) \n      { \n      dpGet(status_strings[i], readInt); \n      status_values[i] = readInt; \n \n      if ( getBit(status_values[i],1) || getBit(status_values[i],2) ) \n      oks[i]=FALSE; \n      else oks[i]=TRUE; \n      ok = ok & oks[i]; \n      } \n \n    tNow = period(getCurrentTime()); \n    tElapsed = tNow-tStart; \n   } \n  \n  if(!ok) DebugTN(\"Some channels are still ramping after 3 minutes. I0 is being set to 2 anyway... please check!\"); \n  if(ok) DebugTN(\"OK: All channels finshed ramping to standby and I0 is being set to 2.\"); \n  \n  for(int i= 1; i <= dynlen(dps); i++) { \n    dynAppend(i0Dps, dps[i]+\".settings.i0\"); \n  } \n  CMSfwDetectorProtection_dpSetAll(i0Dps, 2); \n  \n \n  dps = dpNames(\"*/channel0{00,07}\",\"FwCaenChannelA1515\"); \n   dyn_string vMon_strings; \n  float readvMon; \n  dyn_float vMon_values; \n  bool newOk2 = FALSE; \n  dyn_bool oks2; \n  bool okHvValue = TRUE; \n  \n  float limit = 310; \n \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dynAppend(vMon_strings, dps[i]+\".actual.vMon\"); \n    dpGet( vMon_strings[i] , readvMon ); \n    dynAppend(vMon_values, readvMon); \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    dynAppend(oks2, newOk2); \n    okHvValue = okHvValue & oks2[i]; \n    } \n  \n  okHvValue = FALSE; \n  timeOut = 5*60; \n  tStart = period(getCurrentTime()); \n  tElapsed=0; \n  while(!okHvValue && tElapsed<timeOut) \n  { \n   okHvValue = TRUE; \n   \n  for (int i=1; i<=dynlen(dps); i++) \n    { \n    dpGet( vMon_strings[i] , readvMon ); \n    vMon_values[i]=readvMon; \n    newOk2 = FALSE; \n    if (vMon_values[i] <= limit+5) newOk2=TRUE; \n    oks2[i] = newOk2; \n    okHvValue = okHvValue & oks2[i]; \n    } \n  tNow = period(getCurrentTime()); \n  tElapsed = tNow-tStart;  \n  } \n  \n  ok = ok & okHvValue; \n  if(ok) \n    { \n    bool inputCond; \n   dpGet(\"cms_gem_dcs_1:CMSfwDetectorProtection/Input/G2bot_are_leq_STANDBY_boolCondition.status\",inputCond); \n    if(!inputCond) return; \n \n    DebugTN(\"OK: All channels finished ramping to standby. Moving to switch on next channels.\"); \n    CMSfwDetectorProtection_dpSetAll(\"cms_gem_dcs_1:G3bot_are_leq_STANDBY.boolCondition\" , TRUE);    \n    } \n  if(!okHvValue) \n    { \n    DebugTN(\"Following channels did not reach a safe voltage:\", dps); \n    } \n \n  DebugTN(\"Elapsed time (seconds) between end of ramping and the condition actual.vMon<=vStandby is \", tElapsed, \"for channels \", dps);  \n  \n }  \n  \n",exc);
	CMSfwDetectorProtection_setVerifyModeUserFunction(obj,name,"bool main(anytype value) { \n  bool verify = TRUE; \n float val_float = (float) value; \n if ( val_float>310+5 ) verify=FALSE; \n return verify;\n}",1,exc);
		
 
 
	//Indicate Detector Protection Configuration DP where to save in local system. Always follow convention CMSfwDetectoProtection/Configuration/Whatever...
	CMSfwDetectorProtection_setConfigDp(obj,"CMSfwDetectorProtection/Configuration/LHC_Conditions_Require_MC_STANDBY");
	CMSfwDetectorProtection_saveToDp(obj,exc);
 

  
 //=============================================================== PRIVILEGES ======================================================================
  
  
  //2. Establish Required Privileges for Access Control, here Debug and Modify used... change accordingly to needs
  CMSfwDetectorProtection_setRequiredPrivileges("",makeDynString("CMS_GEM:Debug","CMS_GEM:Modify"));
  DebugTN("Detector Protection configured. Exceptions=",exc);
  
  
  
}